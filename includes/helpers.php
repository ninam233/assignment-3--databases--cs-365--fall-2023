<?php
// Include the configuration file
include_once "config.php";

// Define constants for query types
define("NOTHING_FOUND",  0);
define("SEARCH",         1);
define("UPDATE",         2);
define("INSERT",         3);
define("DELETE",         4);

/**
 * Searches for entries in the database that match the given search query.
 *
 * @param $search The search query to match against entries in the database.
 *
 * @access public
 * @return int Returns 0 if nothing is found, otherwise, returns the results.
 */
function Search($search) {
    try {
        // Include the configuration file (redundant, but left for consistency)

        // Establish a database connection
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        // Construct the SELECT query
        $select_query = "SELECT Users.UserID, Users.FirstName, Users.LastName, Users.Username, Users.Email, Websites.WebsiteID, Websites.WebsiteName, Websites.WebsiteURL, Passwords.PasswordID, Passwords.Password, Passwords.Comment, Passwords.Timestamp FROM Users
                         LEFT JOIN Passwords ON Users.UserID = Passwords.UserID
                         LEFT JOIN Websites ON Passwords.WebsiteID = Websites.WebsiteID
                         WHERE Users.Username LIKE \"%{$search}%\" OR Passwords.Password LIKE \"%{$search}%\" OR Websites.WebsiteID LIKE \"%{$search}%\" OR Websites.WebsiteName LIKE \"%{$search}%\"";

        // Prepare and execute the SELECT query
        $statement = $db->prepare($select_query);
        $statement->execute();

        // Check if any results were found
        if (count($statement->fetchAll()) == 0) {
            return 0; // Nothing found
        } else {
            // Display the results in a table
            echo "        </tbody>\n";
            echo "      </table>\n";
            echo "      <table>\n";
            echo "        <thead>\n";
            echo "          <tr>\n";
            echo "        <th>User ID</th>\n";
            echo "        <th>First Name</th>\n";
            echo "        <th>Last Name</th>\n";
            echo "        <th>Username</th>\n";
            echo "        <th>Email</th>\n";
            echo "        <th>Website ID</th>\n";
            echo "        <th>Website Name</th>\n";
            echo "        <th>Website URL</th>\n";
            echo "        <th>Password ID</th>\n";
            echo "        <th>Password</th>\n";
            echo "        <th>Comment</th>\n";
            echo "        <th>Timestamp</th>\n";
            echo "          </tr>\n";
            echo "        </thead>\n";
            echo "        <tbody>\n";

            // Iterate through the results and display each row in the table
            foreach ($db->query($select_query)as $row) {
                echo "          <tr>\n";
                echo "            <td>" . (isset($row[0]) ? htmlspecialchars($row[0]) : '') . "</td>\n";
                echo "            <td>" . (isset($row[1]) ? htmlspecialchars($row[1]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[2]) ? htmlspecialchars($row[2]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[3]) ? htmlspecialchars($row[3]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[4]) ? htmlspecialchars($row[4]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[5]) ? htmlspecialchars($row[5]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[6]) ? htmlspecialchars($row[6]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[7]) ? htmlspecialchars($row[7]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[8]) ? htmlspecialchars($row[8]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[9]) ? htmlspecialchars($row[9]) : ''). "</td>\n";
                echo "            <td>" . (isset($row[10]) ? htmlspecialchars($row[10]) : '') . "</td>\n";
                echo "          </tr>\n";
            }

            echo "         </tbody>\n";
            echo "      </table>\n";
        }
    } catch (PDOException $e) {
        // Handle exceptions related to database operations
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        echo "<p>There may be a few reasons why this occured. The database possibly doesn’t exist or wasn’t mounted properly. Does the drive containing the database have proper read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to head back.</p>';

        exit;
    }
}

/**
 * Deletes entries from the database based on the provided attribute and value.
 *
 * @param $attribute The attribute to match for deletion.
 * @param $value     The value of the attribute to match for deletion.
 *
 * @access public
 * @return void
 */
function Delete($attribute, $value) {
    try {
        // (No changes here)

    } catch (PDOException $e) {
        // (No changes here)
    }
}

/**
 * Inserts a new entry into the database with the provided values.
 *
 * @param $siteName   The name of the website.
 * @param $URL        The URL of the website.
 * @param $Email      The email associated with the user.
 * @param $FirstName  The first name of the user.
 * @param $LastName   The last name of the user.
 * @param $Username   The username associated with the user.
 * @param $Password   The password associated with the user.
 * @param $comment    Additional comments or information.
 *
 * @access public
 * @return void
 */
function Insert($siteName, $URL, $Email, $FirstName, $LastName, $Username, $Password, $comment) {
    try {
        // Include the configuration file (redundant, but left for consistency)

        // Establish a database connection
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        // Set encryption parameters
        $db->exec("SET block_encryption_mode = 'aes-128-cbc'");
        $db->exec("SET @key_str = SHA2('" . ENCRYPTION_KEY . "',256)");
        $db->exec("SET @init_vector = 'h>1&cr!fTy[oZgS'");
        $db->exec("SET @pass_phrase = '" . ENCRYPTION_PASSPHRASE . "'");

        // Encrypt the password before insertion
        $encrypted_password = "AES_ENCRYPT('" . $Password . "', @key_str, @init_vector)";

        // Construct the INSERT query
        $insert_query = "INSERT INTO Users (Email, FirstName, LastName, Username, Comment) VALUES ('{$Email}', '{$FirstName}', '{$LastName}', '{$Username}' '{$comment}');
                         INSERT INTO Websites (WebsiteName, WebsiteURL) VALUES ('{$siteName}', '{$URL}');
                         INSERT INTO Passwords (Password) VALUES ({$encrypted_password})";

        // Begin a transaction
        $db->beginTransaction();

        // Execute the INSERT queries
        $db->exec($insert_query);

        // Commit the transaction
        $db->commit();
    } catch (PDOException $e) {
        // Handle exceptions related to database operations
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        echo "<p>There may be a few reasons why this occured. The database possibly doesn’t exist or wasn’t mounted properly. Does the drive containing the database have proper read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to head back.</p>';

        // Rollback the transaction
        $db->rollBack();

        exit;
    }
}

/**
 * Updates a specific attribute in the database based on the provided parameters.
 *
 * @param $current_attribute The attribute to update.
 * @param $new_attribute     The new value for the attribute.
 * @param $query_attribute   The attribute to use for the WHERE clause.
 * @param $pattern           The value to match in the WHERE clause.
 *
 * @access public
 * @return void
 */
function Update($current_attribute, $new_attribute, $query_attribute, $pattern) {
    try {
        // Include the configuration file (redundant, but left for consistency)

        // Establish a database connection
        $db = new PDO(
            "mysql:host=" . DBHOST . "; dbname=" . DBNAME . ";charset=utf8",
            DBUSER,
            DBPASS
        );

        // Construct the UPDATE query
        $update_query = "UPDATE Passwords SET {$current_attribute} = '{$new_attribute}' WHERE {$query_attribute} = '{$pattern}'";

        // Begin a transaction
        $db->beginTransaction();

        // Execute the UPDATE query
        $db->exec($update_query);

        // Commit the transaction
        $db->commit();
    } catch( PDOException $e ) {
        // Handle exceptions related to database operations
        echo '<p>The following message was generated by function <code>search</code>:</p>' . "\n";
        echo '<p id="error">' . $e->getMessage() . '</p>' . "\n";
        echo "<p>There may be a few reasons why this occured. The database possibly doesn’t exist or wasn’t mounted properly. Does the drive containing the database have proper read and write permissions?</p>\n";
        echo '<p>Click <a href="./">here</a> to head back.</p>';

        // Rollback the transaction
        $db->rollBack();

        exit;
    }
}
